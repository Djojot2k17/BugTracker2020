@using Microsoft.AspNetCore.Identity
@inject UserManager<BTUser> UserManager
@inject BugTracker2020.Data.ApplicationDbContext db
@{
  ViewData["Title"] = "Dashboard";
  var userId = UserManager.GetUserId(User);
  var user = db.Users.Find(userId);
  var roleName = (await UserManager.GetRolesAsync(await UserManager.GetUserAsync(User))).FirstOrDefault();
}

<div class="p-5 h-100 rounded text-white" style="background: url(/assets/media/bg/bg-2.jpg); background-size: cover; border-top-left-radius: 0 !important;">

  <div class="row">
    <div class="col">
      <div class="bg-dark p-2 rounded mb-2 d-flex justify-content-between">
        <div>
          <h2>Hello @user.FullName</h2>
          <p>Your current role is @roleName</p>
        </div>
        <blockquote class="blockquote">
          <p class="mb-0" id="quoteText"></p>
          <footer class="blockquote-footer ml-auto" id="quoteAuthor"></footer>
        </blockquote>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-xl-4">
      <!--begin::Card-->
      <div class="card bg-dark-o-100 card-custom gutter-b">
        <div class="card-header mx-auto">
          <div class="card-title">
            <h3 class="card-label text-white">Current Tickets by Status</h3>
          </div>
        </div>
        <div class="card-body">
          <div id="statusChart" style="height: 300px;"></div>
          <div id="statusChartMemo" class="text-center" style="height: 30px; width: 250px;margin: 0 auto;"></div>
        </div>
      </div>
      <!--end::Card-->
    </div>
    <div class="col-xl-4">
      <!--begin::Card-->
      <div class="card bg-dark-o-100 card-custom gutter-b">
        <div class="card-header mx-auto">
          <div class="card-title">
            <h3 class="card-label text-white">Current Tickets by Priority</h3>
          </div>
        </div>
        <div class="card-body">
          <div id="priorityChart" style="height: 300px;"></div>
          <div id="priorityChartMemo" class="text-center" style="height: 30px; width: 250px;margin: 0 auto;"></div>
        </div>
      </div>
      <!--end::Card-->
    </div>

    <div class="col-xl-4">
      <!--begin::Card-->
      <div class="card bg-dark-o-100 card-custom gutter-b">
        <div class="card-header mx-auto">
          <div class="card-title">
            <h3 class="card-label text-white">Current Tickets by Type</h3>
          </div>
        </div>
        <div class="card-body">
          <div id="typeChart" style="height: 300px;"></div>
          <div id="typeChartMemo" class="text-center" style="height: 30px; width: 250px;margin: 0 auto;"></div>
        </div>
      </div>
      <!--end::Card-->
    </div>
  </div>
  <div class="row">
    <div class="col">
      <!--begin::Card-->
      <div class="card bg-dark-o-100 card-custom gutter-b">
        <div class="card-header w-100">
          <div class="card-title w-100">
            <h3 class="card-label text-white mx-auto">Ticket Count on Projects</h3>
          </div>
        </div>
        <div class="card-body">
          <div id="ticketProjectChart" style="height: 300px;"></div>
        </div>
      </div>
      <!--end::Card-->
    </div>
  </div>
  <div id="chart"></div>
</div>

@section Scripts {
  <script>
    // Status Chart
    let statusUrl = '@Url.Action("GetStatusChartData", "Home")';
    let statusData = [];
    let colorArr = ['#1BC5BD', '#6993FF', '#FFA800', '#F64E60', '#28a745',];
    let options = {
      series: {
        pie: {
          show: true,
        },
      },
      legend: {
        show: false,
      },
      grid: {
        show: false,
        hoverable: true
      }
    };

    // Status Chart
    $.post(statusUrl).then((res) => {
      //console.log(res);
      res.forEach(el => {
        //console.log(el)
        statusData.push(el);
      });
      //console.log(data2);
      statusData.forEach((col, i) => {
        //console.log(col)
        statusData[i].color = colorArr[i];
      });
      //console.log(statusData)
      $.plot($("#statusChart"), statusData, options);

      // Show memo for status chart on hover
      $('#statusChart').bind("plothover", function (event, pos, item) {
        if (!item) { return; }
        var html = [];
        var percent = parseFloat(item.series.percent).toFixed(2);
        html.push("<div style=\"background-color:transparent\">",
          "<span style=\"color: " + item.series.color + "\">",
          item.series.label,
          " : ",
          item.series.data[0][1],
          "</span>",
          "</div>");
        $("#statusChartMemo").html(html.join(''));
      });
      // When the mouse leaves the chart, clear ChartMemo
      $("#statusChart").mouseout(() => {
        //console.log('mouse is gone')
        $('#statusChartMemo').empty();
      });
    });

    // Priority Chart
    let priorityUrl = '@Url.Action("GetPriorityChartData", "Home")';
    let priorityData = [];
    $.post(priorityUrl).then((res) => {
      //console.log(res);
      res.forEach(el => {
        //console.log(el)
        priorityData.push(el);
      });
      //console.log(data2);
      priorityData.forEach((col, i) => {
        //console.log(col)
        priorityData[i].color = colorArr[i];
      });
      //console.log(priorityData)
      $.plot($("#priorityChart"), priorityData, options);

      // Show memo for priority chart on hover
      $('#priorityChart').bind("plothover", function (event, pos, item) {
        if (!item) { return; }
        var html = [];
        var percent = parseFloat(item.series.percent).toFixed(2);
        html.push("<div style=\"background-color:transparent\">",
          "<span style=\"color: " + item.series.color + "\">",
          item.series.label,
          " : ",
          item.series.data[0][1],
          "</span>",
          "</div>");
        $("#priorityChartMemo").html(html.join(''));
      });
      // When the mouse leaves the chart, clear ChartMemo
      $("#priorityChart").mouseout(() => {
        //console.log('mouse is gone')
        $('#priorityChartMemo').empty();
      });

    });

    // Type Chart
    let typeUrl = '@Url.Action("GetTypeChartData", "Home")';
    let typeData = [];
    $.post(typeUrl).then((res) => {
      //console.log(res);
      res.forEach(el => {
        //console.log(el)
        typeData.push(el);
      });
      //console.log(data2);
      typeData.forEach((col, i) => {
        //console.log(col)
        typeData[i].color = colorArr[i];
      });

      //console.log(priorityData)
      $.plot($("#typeChart"), typeData, options);

      // Show memo for type chart on hover
      $('#typeChart').bind("plothover", function (event, pos, item) {
        if (!item) { return; }
        var html = [];
        var percent = parseFloat(item.series.percent).toFixed(2);
        html.push("<div style=\"background-color:transparent\">",
          "<span style=\"color: " + item.series.color + "\">",
          item.series.label,
          " : ",
          item.series.data[0][1],
          "</span>",
          "</div>");
        $("#typeChartMemo").html(html.join(''));
      });
      // When the mouse leaves the chart, clear typeChartMemo
      $("#typeChart").mouseout(() => {
        //console.log('mouse is gone')
        $('#typeChartMemo').empty();
      });
    });

    // Bar Chart

    let ticketCountUrl = '@Url.Action("GetTicketCountOnProjects", "Home")';
    let colorIndex = 0;
    $.post(ticketCountUrl).then((res) => {
      Morris.Bar({
        // ID of the element in which to draw the chart.
        element: 'ticketProjectChart',
        // Chart data records -- each entry in this array corresponds to a point on
        // the chart.
        data: res,
        // The name of the data record attribute that contains x-values.
        xkey: 'projectName',
        // A list of names of data record attributes that contain y-values.
        ykeys: ['ticketCount'],
        // Labels for the ykeys -- will be displayed when you hover over the
        // chart.
        labels: ['Ticket Count'],
        barColors: (row, series, type) => {
          return colorArr[row.x]
        },
        hideHover: 'auto',
        resize: true
      });
    });

    // Fetch quote of the day

    fetch("https://type.fit/api/quotes")
      .then(function (response) {
        return response.json();
      })
      .then(function (data) {
        const random = Math.floor(Math.random() * data.length);
        $('#quoteText').text(data[random].text);
        $('#quoteAuthor').text(data[random].author != null ? data[random].author : 'Unknown Author');
        console.log(data[random]);
      });
  </script>
}

@*LOGIN PAGE

  ON LOGIN REDIRECT TO VIEW

  ADMIN VIEW
  ADMIN gets to see everything.
  {
  User management
  Assign user roles
  Assign / remove users to/from projects

  Project management
  Summary of projects and currently assigned users
  Add / edit / remove projects

  Ticket management
  Summary of tickets and ticket histories
  Create / update / delete tickets and ticketProps
  }

  PM VIEW has access to:
  {
  Project management
  Summary of projects and currently assigned users
  Add / edit / remove projects

  Ticket management
  Summary of tickets and ticket histories
  Create / update / delete tickets and ticketProps
  }

  DEV VIEW has access to:
  {
  Summary of currently assigned projects and tickets
  Ticket management
  Summary of tickets and ticket histories
  Create / update / delete tickets and ticketProps
  }

  SUBMITTER VIEW
  {
  Create anchor tag that can be placed anywhere on the app
  <a href="#">Something Broken?</a> redirect to Submit Ticket Form
  }
*@